{"version":3,"sources":["chirp-context/chirpContext.js","components/pictures/colorful-parrots.jpg","components/pictures/old-telephones.jpg","components/pictures/typerwriter.jpg","components/site-button.js","components/Landing-page/landing-page.js","components/Message-board/Post.js","components/pictures/chirping-bird.jpg","components/Message-board/message-board.js","App.js","index.js","config.js"],"names":["chirpContext","React","createContext","mbTitle","showThread","posts","handleCreatePost","handleEditPost","handleDeletePost","SiteButton","props","className","children","landingPage","Consumer","context","id","src","ColorfulParrots","alt","OldTelephone","Typewriter","to","style","fontSize","Post","myRef","createRef","state","showDetails","isEdited","isDeleted","isSaved","isReplying","replyIdToBeEdited","content","title","post","this","toggleThread","setState","handleTextareaEdit","e","target","value","toggleCancel","handleChirp","handleAddedReplyContent","handleFetchCreateReply","preventDefault","reply","UUID","postId","console","log","fetch","API_URL","method","headers","body","JSON","stringify","then","res","json","addReply","catch","error","message","editedReply","replies","find","editedText","onClick","Fragment","colSpan","onSubmit","onChange","replyId","postid","ok","Error","status","editReply","handleFetchEditReply","map","deleteReply","Component","contextType","messageBoard","isCreatingPost","showAddForm","ChirpingBird","newPost","participantsInitials","numOfParticipants","numOfReplies","timeOpen","createNewPost","type","placeholder","App","prevState","originalPosts","push","newReply","matchingPost","handleEditReply","matchingPostIndex","findIndex","replyIndex","splice","newPosts","handleDeleteReply","forEach","contextValue","Provider","exact","path","component","ReactDOM","render","document","getElementById","module","exports","PORT","process","NODE_ENV"],"mappings":"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","file":"static/js/main.f74df322.chunk.js","sourcesContent":["import React from 'react';\n\nconst chirpContext = React.createContext({\n  mbTitle: '',\n  showThread: false,\n  posts: [],\n  handleCreatePost: () => { },\n  handleEditPost: () => { },\n  handleDeletePost: () => { }\n})\n\nexport default chirpContext;","export default __webpack_public_path__ + \"static/media/colorful-parrots.711a6a95.jpg\";","export default __webpack_public_path__ + \"static/media/old-telephones.36d67495.jpg\";","export default __webpack_public_path__ + \"static/media/typerwriter.81be67e0.jpg\";","import React from 'react';\nimport './site-button.css';\n\nconst SiteButton = (props) => {\n  return (\n    // .children allows multiple components to access, adding all attribute props\n    <button className=\"site-button\" {...props}>{props.children}</button>\n  )\n}\n\nexport default SiteButton;\n\n\n","import React from 'react';\nimport chirpContext from '../../chirp-context/chirpContext';\nimport { Link } from 'react-router-dom';\nimport ColorfulParrots from '../pictures/colorful-parrots.jpg'\nimport OldTelephone from '../pictures/old-telephones.jpg'\nimport Typewriter from '../pictures/typerwriter.jpg'\nimport SiteButton from '../site-button'\nimport './landing-page.css';\n\n\n\n// edited text should only appear once with text-box around it\n// delete should bring up prompt, button should disappear, and reply should be removed upon confirmation ||  \n// style all buttons using separate component\n/* \nresize expresso photo/ all photos to take up width of container, \nstart with 1st image on load and then transition after 3-4 sec\n*/\n// separate post, reply in some manner\n\n\nconst landingPage = () => {\n  return (\n    <chirpContext.Consumer>\n      {(context) => {\n        return (\n          <div id=\"landing-page-container\">\n            <div className=\"container\">\n              <div id=\"content-slider\">\n                <div id=\"slider\">\n                  <div id=\"mask\">\n                    <img className=\"parrots\" src={ColorfulParrots} alt=\"vivid parrots up close in the wild\" />\n                    <img className=\"rotary\" src={OldTelephone} alt=\"three old rotary phones lined up against a wall\" />\n                    <img className=\"typewriter\" src={Typewriter} alt=\"Old typewriter\" />\n                  </div>\n                  <div className=\"progress-bar\"></div>\n                </div>\n              </div>\n            </div>\n            <h1 id=\"site-title\">Welcome to Chirp-(En-Passant)!</h1>\n            <h2>(An online discussion board)</h2>\n            {/* style button to match carosel || have a className=\"siteButton\" */}\n            <Link to=\"/message-board\"><SiteButton style={{ fontSize: \".9em\" }}>Let's Get Started!</SiteButton></Link>\n          </div>\n        )\n      }}\n    </chirpContext.Consumer>\n  )\n}\n\nexport default landingPage;","import React from 'react';\nimport chirpContext from '../../chirp-context/chirpContext';\nimport './Post.css';\nimport SiteButton from '../site-button';\nimport UUID from 'react-uuid';\nimport { API_URL } from '../../config';\n\nclass Post extends React.Component {\n  static contextType = chirpContext;\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n    this.state = {\n      showDetails: false,\n      isEdited: false,\n      isDeleted: false,\n      isSaved: false,\n      isReplying: false,\n      replyIdToBeEdited: null,\n      content: '',\n      title: '',\n    }\n  }\n  render() {\n    const { post } = this.props;\n    // bring outside of render\n    const toggleThread = () => {\n      this.setState({\n        showDetails: !this.state.showDetails\n      })\n    }\n\n    const toggleEdit = (replyId) => {\n      this.setState({\n        replyIdToBeEdited: replyId,\n        isEdited: true,\n        isReplying: false,\n        isDeleted: false,\n      })\n    }\n\n    const handleTextareaEdit = (e) => {\n      this.setState({ content: e.target.value })\n    }\n\n    const toggleCancel = () => {\n      this.setState({\n        isEdited: false,\n        isReplying: false,\n      })\n    }\n\n    const handleChirp = () => {\n      // creating ui for reply\n      this.setState({\n        isReplying: true\n      })\n    }\n\n    // const buildHandleSave = (e, context) => {\n    //   context.addReply(post.id, this.state.content);\n    //   this.setState({ isReplying: false })\n    // }\n\n    const handleAddedReplyContent = (e) => {\n      this.setState({\n        content: e.target.value\n      })\n    }\n\n    const handleFetchCreateReply = (e) => {\n      e.preventDefault()\n      const reply = {\n        id: UUID(),\n        content: this.state.content,\n        postId: this.props.post.id\n      }\n      console.log('content:', this.state.content)\n      fetch(`${API_URL}/replies`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(reply)\n      })\n        // .then(res => {\n        //   if (!res.ok) {\n        //     throw new Error(res.status)\n        //   }\n        //   return res.json()\n        // })\n        .then(res => res.json())\n        // .then(data => console.log('success', data))\n        .then(() => {\n          this.context.addReply(reply.id, this.props.post.id, this.state.content)\n          this.setState({\n            isReplying: false,\n            content: ''\n          })\n        }\n        )\n        .catch((error) => {\n          console.error('error:', error.message)\n        })\n    }\n\n    const handleFetchEditReply = (replyId) => {\n      console.log(this.props.post.id)\n      const replies = {\n        id: this.state.replyIdToBeEdited,\n        content: this.state.content,\n        postid: this.props.post.id\n      }\n      return fetch(`${API_URL}/replies/${replyId}`, {\n        method: 'PUT',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(replies)\n      })\n        .then(res => {\n          if (!res.ok) {\n            throw new Error(res.status)\n          }\n          return res.json()\n        })\n        .then(() => {\n          this.context.editReply(replyId, this.state.content, this.props.post.id)\n          this.setState({\n            isEdited: false,\n            content: ''\n          })\n        }\n        )\n    }\n\n    const handleFetchDeleteReply = (replyId) => {\n      fetch(`${API_URL}/replies/${replyId}`, {\n        method: 'DELETE',\n        headers: {\n          'content-type': 'application/json'\n        }\n      })\n        .then(res => {\n          if (!res.ok) {\n            throw new Error(res.status)\n          }\n          return res.json()\n        })\n        .catch(error => this.setState({ error }\n        ))\n        .then(() => this.context.deleteReply(this.props.post.id, replyId)\n        )\n        .then(this.setState({ toggleThread: null }))\n    }\n\n    const editedReply = post.replies.find(reply => reply.id === this.state.replyIdToBeEdited);\n    const editedText = this.state.content || (editedReply && editedReply.content)\n    return (\n      <chirpContext.Consumer>\n        {context => {\n          return (\n            <tbody key=\"tb\">\n              <tr key=\"header\" id=\"tr-threads\">\n                <td key=\"title\">{post.title}</td>\n                <td key=\"button\"><button onClick={toggleThread}>{this.state.showDetails ? '⬆' : \"⬇\"}</button></td>\n              </tr>\n              {this.state.showDetails ?\n                <React.Fragment>\n                  <tr key=\"cr-sec\" id=\"cr-sec\"> Content and Replies Section:</tr>\n                  <tr key=\"sd\">\n                    <td className=\"col-span\" colSpan={6}>{post.content}\n                      <section key=\"section\"></section>\n                      {/* stateful logic to display textarea */}\n                      {this.state.isReplying ?\n                        <>\n                          <p>New Chirp:</p>\n                          {/* 1.) Click on 'Chirp' 2.) enter reply in textarea 3.) 'Save' new reply*/}\n                          <form key=\"form\" id=\"create-reply-form\" onSubmit={handleFetchCreateReply}>\n                            <textarea key=\"tar\" className=\"reply-textarea\" value={this.state.content} onChange={handleAddedReplyContent} ></textarea>\n                            <SiteButton onClick={toggleCancel}>Cancel</SiteButton>\n                            <SiteButton>Save</SiteButton>\n                          </form>\n                        </> :\n                        // onClick of 'Chirp' buttton opens up form with an empty textbox to render input from user --clicking on 'Save' button will submit user input and add reply to message board \n                        <SiteButton onClick={handleChirp}>Chirp</SiteButton>\n                      }\n                    </td>\n                  </tr>\n                  {this.state.isEdited && (\n                    <tr key=\"rce\" className=\"edit-reply-section\">\n                      <td key=\"col\" colSpan={6}>\n                        {/* siblings are vertical */}\n                        <textarea key=\"edit-reply ta\" value={editedText} onChange={handleTextareaEdit} />\n                        <div key=\"sb's\">\n                          <SiteButton onClick={toggleCancel}>Cancel</SiteButton>\n                          <SiteButton onClick={(e) => handleFetchEditReply(this.state.replyIdToBeEdited)}>Save</SiteButton>\n                        </div>\n                      </td>\n                    </tr>\n                  )}\n                  {post.replies.map(reply => {\n                    return (\n                      <React.Fragment key={reply.id}>\n                        <tr className=\"replies-section\">\n                          <td key=\"colr\" colSpan={6}>\n                            {!this.state.isEdited &&\n                              <section key=\"rsec\" onChange={(e) => this.setState({ content: e.target.value })} value={this.state.content} className=\"reply-section\">{reply.content || 'There was no reply.'}</section>\n                            }\n                            <div className=\"thread-btns\">\n                              {/* document.getElementById = previousElementSibling */}\n                              {!this.state.isEdited && <SiteButton onClick={() => toggleEdit(reply.id)}>Edit</SiteButton>}\n                              {!this.state.isDeleted && !this.state.isEdited && <SiteButton onClick={() => handleFetchDeleteReply(reply.id)}>Drop</SiteButton>}\n                            </div>\n                          </td>\n                        </tr>\n                      </React.Fragment>\n                    )\n                  })}\n                </React.Fragment> : null\n              }\n            </tbody>\n          )\n        }\n        }\n      </chirpContext.Consumer >\n    )\n  }\n}\n\nexport default Post;\n\n// handling logic for updating reply (moved functionalty over to app and then called editReply fx within Post)\n// const handleSave = (e) => {\n// calls fx from app\n//what info does handleSave need?\n// the id of the post\n// know which reply (replyId)\n// text from the input field\n\n// how do you use that info to solve the problem\n// find the correct post // how: find id\n// find the correct reply\n// find replyId // update reply //assign reply with new data\n\n// post.id, id\n// post.replies[replyId - 1].replyId, replyId\n// DOM traversal: (S) Save button (E) textarea\n// innerText vs. value\n// let matchingid = post.id;\n// console.log(matchingid)\n// let matchingReplyId = this.state.replyIdToBeEdited;\n// console.log(matchingReplyId)\n// let editedReply = e.target.parentNode.firstChild.value;\n// console.log(editedReply)\n// let replyName;\n// this.setState({\n//   isEdited: false,\n//   isReplying: false,\n//   replyToBeEdited: ''\n// })\n// }\n\n// ToDo's: 4/2\n// textarea should appear and nothing else -->\n// textarea should close and new text should render \n// delete button is being removed instead of text upon click of 'drop'\n// drop button shouldn't appear upon clicking edit\n","export default __webpack_public_path__ + \"static/media/chirping-bird.d38cb81b.jpg\";","import React from 'react';\nimport chirpContext from '../../chirp-context/chirpContext';\nimport { Link } from 'react-router-dom';\nimport './message-board.css';\nimport Post from './Post';\nimport ChirpingBird from '../pictures/chirping-bird.jpg';\nimport SiteButton from '../site-button';\nimport { API_URL } from '../../config';\nimport UUID from 'react-uuid';\n\nclass messageBoard extends React.Component {\n  static contextType = chirpContext;\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCreatingPost: false,\n      showAddForm: false,\n      title: '',\n      content: '',\n    }\n  }\n\n  render() {\n\n    const handleShowAddForm = () => {\n      this.setState({ showAddForm: true })\n    }\n\n\n    const handleFetchCreatePost = (e) => {\n      e.preventDefault();\n      const newPost = {\n        id: UUID(),\n        title: this.state.title,\n        content: this.state.content,\n        participantsInitials: '',\n        numOfParticipants: 0,\n        numOfReplies: 0,\n        replies: [],\n        timeOpen: 'One minute ago'\n      }\n      fetch(`${API_URL}/posts`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(newPost)\n      }).then(res => {\n        if (!res.ok) {\n          throw new Error(res.status)\n        }\n        return res.json()\n      }).catch(error => this.setState({ error }\n      )).then(() => {\n        this.context.createNewPost(this.state.id, this.state.title, this.state.content)\n        this.setState({\n          isCreatingPost: false,\n          title: '',\n          content: '',\n          showAddForm: false\n        })\n      }\n      )\n    }\n\n    return (\n      <div id=\"mb-container\">\n        <img src={ChirpingBird} alt=\"bird chirping on a tree branch\" />\n        <h1 id=\"mb-page-title\">Chirp(En-Passant) Message Board:</h1>\n        {/* <img src=\"search-bar-icon\" alt=\"search bar icon for message board\" /> */}\n        <div id=\"mb-links\">\n          <Link to=\"/\" key={'/'}>Home</Link>\n        </div>\n        {!this.state.showAddForm ?\n          <div>\n            <div id=\"user-instructions\">\n              <h3>Chirp Instructions:</h3>\n              <p>1.) Click one of the down arrows to the right to view a post, OR Create your own!</p>\n              <p>2.) Click 'Chirp' to reply and share your thoughts in the discussion board! <br /> (You may edit and delete your reply also!) </p>\n            </div>\n            <SiteButton onClick={handleShowAddForm}>Create New Post</SiteButton>\n          </div> :\n          <form className=\"form-inline\" onSubmit={handleFetchCreatePost}>\n            {/* eslint-disable-next-line */}\n            <label className=\"ptl\">Title:</label>\n            {/* eslint-disable-next-line */}\n            <input className=\"post-title\" onChange={(e) => this.setState({ title: e.target.value })} value={this.state.title} type=\"text\" id=\"new-post-title\" placeholder=\"New ish\" />\n            {/* eslint-disable-next-line */}\n            <label className=\"pcl\">Topic:</label>\n            {/* eslint-disable-next-line */}\n            <input className=\"post-content\" onChange={(e) => this.setState({ content: e.target.value })} value={this.state.content} type=\"text\" id=\"new-post-topic\" placeholder=\"down 4 and 7 beers ago...\" />\n            {<SiteButton>Chirp!</SiteButton>}\n          </form>\n        }\n        <table id=\"mb-table\">\n          <thead>\n            <tr id=\"table-row\">\n              <th id=\"title-tr-mb\">Title:</th>\n            </tr>\n          </thead>\n          {this.context.posts.map(post => {\n            return (\n              <Post post={post} key={post.title} />\n            )\n          })}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default messageBoard;\n\n\n\n/*\n\nTodo:\n after submitting: hide content fields and display 'Chirp' button again to add another post\n\nEndpoints:\nPosts\n/posts\n  create\n  read\n    GET '/posts\n  delete\nreplies\n/replies\n  create\n    {reply}\n  update\n  delete\n  DELETE/:reply_id\nHaving trouble assigning db to user Triggxl\ncould use some help seeding data to db (through migrations I believe?)\nsetting up API endpoints\n\n/book/book_id\nCRUD\n\n// Create it in JSX\n// create state....method to update state\n/* (MVP) <select name=\"drop-down-for-mb\" id=\"drop-down-for-mb\" onChange={e.target}>\n<option value=\"my-profile\" onChange={() => HandleClickToProfilePage}>My Profile</option>\n<option value=\"my-posts\" onChange={() => HandClickToMyPostsPage}>My Posts</option>\n<option value=\"landing-page\" onChange={() => HandleClickToHomePage}>Chirp Home Page</option>\n</select>\n\n// (useHistory hook for MVP) state = {\n    //   selected: ''\n    // }\n    // function HandleClickToProfilePage(e) {\n    //   let history = useHistory(e.target);\n    //   history.push('/profile');\n    // }\n    // function HandClickToMyPostsPage(e) {\n    //   let history = useHistory(e.target);\n    //   history.push('/my-posts')\n    // }\n    // function HandleClickToHomePage(e) {\n    //   let history = useHistory(e.target);\n    //   history.push('/');\n    // }\n    // https://reactrouter.com/web/api/Hooks; https://stackoverflow.com/questions/51337618/reactjs-modifying-state-and-changing-url-onchange;\n\n// figured I need to make a build fx to grab the values on submit (Chirp);\n    // console logging to see output to make sure it's the correct element\n    // const buildNewPostOnChirp = (e) => {\n    //   this.setState({\n    //   })\n    // }\n */\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport landingPage from './components/Landing-page/landing-page';\nimport messageBoard from './components/Message-board/message-board';\nimport chirpContext from './chirp-context/chirpContext';\nimport './App.css';\nimport { API_URL } from './config'\n\nclass App extends React.Component {\n  static contextType = chirpContext;\n  state = {\n    posts: [\n\n    ]\n  }\n\n  componentDidMount() {\n    fetch(`${API_URL}/posts`)\n      .then(res => res.json())\n      // .then(data => this.setState({ posts: data }))\n      // \n      .then((posts) => {\n        fetch(`${API_URL}/replies`)\n          .then(res => res.json())\n          .then(replies => {\n            replies.forEach(reply => {\n              const post = posts.find(post => post.id === reply.postId)\n              post.replies = post.replies || []\n              post.replies.push(reply)\n            })\n            this.setState({ posts })\n          })\n      })\n  }\n\n\n  createNewPost = (id, title, content) => {\n    const newPost = {\n      id,\n      title,\n      content,\n      participantsInitials: '',\n      numOfParticipants: 0,\n      numOfReplies: 0, //increment based off addReply for loop... || map iterates through and use counter?\n      replies: [],\n      timeOpen: 'One minute ago'\n    }\n    // a cb fx will provide previous state as the callback by default\n    this.setState(prevState => {\n      // copy of state to modify to prevent mututating and other oddities\n      const originalPosts = [...prevState.posts];\n      originalPosts.push(newPost)\n      return {\n        // property changing: new value\n        posts: originalPosts\n      }\n    })\n  }\n  // finding matching posts with prevState, editing it dynamically with whatever the user inputs and then giving it back to state\n  addReply = (id, postid, content) => {\n    const newReply = {\n      id,\n      title: '',\n      content,\n      postid\n    }\n    this.setState((prevState) => {\n      // finds the post with matching id goes into that post's reply, reconstructing new object within array to account for other properties reply has\n      console.log('prevState:', prevState)\n      const originalPosts = [...prevState.posts];\n      // console.log(originalPosts, postId)\n\n      let matchingPost = originalPosts.find(post => post.id === postid);\n      console.log('postid:', postid)\n      console.log('matching post:', matchingPost)\n      // add new reply to matching post\n      matchingPost.replies.push(newReply);\n      return {\n        posts: originalPosts\n      }\n    })\n  }\n  // not getting to addReply...something wrong with handler not allowing user input\n\n  // put\n  handleEditReply = (replyId, content, id) => {\n    // console.log('replies state:', this.state.replies)\n    // find post\n    let matchingPost = this.state.posts.find(post => post.id === id);\n    let matchingPostIndex = this.state.posts.findIndex(post => post.id === id);\n    // find index of reply\n    let replyIndex = matchingPost.replies.findIndex(reply => reply.id === replyId);\n    // get reply with idx\n    const reply = { ...matchingPost.replies[replyIndex] }\n    reply.content = content\n    matchingPost.replies.splice(replyIndex, 1, reply)\n    // create posts instance\n    let newPosts = [...this.state.posts]\n    // update with new\n    newPosts.splice(matchingPostIndex, 1, matchingPost)\n    this.setState({ posts: newPosts })\n  }\n\n  // delete\n  handleDeleteReply = (id, replyId) => {\n    // find the right post\n    let matchingPost = this.state.posts.find(post => post.id === id);\n    // find matching reply\n    let replyIndex = matchingPost.replies.findIndex(reply => reply.id === replyId);\n    // splice out reply from that post\n    matchingPost.replies.splice(replyIndex, 1)\n    // splice post back into array\n    let newPosts = [...this.state.posts]\n    let matchingPostIndex = this.state.posts.findIndex(post => post.id === id);\n    newPosts.splice(matchingPostIndex, 1, matchingPost)\n\n    this.setState({ posts: newPosts })\n  }\n\n  render() {\n    const contextValue = {\n      posts: this.state.posts,\n      createNewPost: this.createNewPost,\n      addReply: this.addReply,\n      editReply: this.handleEditReply,\n      deleteReply: this.handleDeleteReply,\n      handleCreatePost: this.handleCreatePost,\n      handleEditPost: this.handleEditPost,\n      handleDeletePost: this.handleDeletePost\n    }\n    return (\n      <chirpContext.Provider value={contextValue}>\n        <Route exact path=\"/\" component={landingPage}>\n        </Route>\n        <Route path=\"/message-board\" component={messageBoard}>\n        </Route>\n      </chirpContext.Provider>\n    );\n  }\n}\nexport default App;\n\n\n/*\nKEEP ALL NOTES FOR EACH FILE BELOW CODE\nDate:\n\nNotes:\n\nCompleted:\n\nNext Steps:\n\n4/17\n[] How to turn these methods into fetch calls?\n\nwith the ability for user to create a new post- add, edit, and delete replies to it stored on server\nI'm trying to write out my fetch calls to support creating a post, which includes creating, editing, and deleting a reply.\nI need help understanding how to store all of this data on a server\nCRUD operations are all happening on the same page, no need to route to specific endpoints; operations are just being performed separately\nis this accomplishing the same as createNewPost but with an endpoint to store the data on?\nhow do I tie that endpoint to my database?\n\n\nWrite out API fetch calls + test in postman\nStore data in DB\n\n4/16\n// reference in service fx for API calls\n// exercise: accessing nested properties\n// componentDidMount() {\n  //   //\n  //   axios.post('/posts', {\n  //     data: {\n  //       postId: UUID,\n  //       title: title,\n  //       content: content\n  //     },\n  //   })\n  //   axios.get('/posts', {\n  //     //\n  //   })\n  //   axios.put('/posts', {\n  //     //\n  //   })\n  // }\n  // componentWillUnmount() {\n  //   axios.delete('/posts', {\n  //     //\n  //   })\n  // }\n  // https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/\n\n  // data is being stored in App\n  // want to keep 1-2 'example' posts on render with ability for user to create their own/reply to example posts\n  // unsure of how to seed dummy data from App into seed files with maintaining referential integrity of data structure\n\nPlan:\n\n1.) Get Create Post functionality working\n2.) set up API endpoints\n3.) Seed database with posts and replies data\n\nStyling:\n1.) Get font-awesome library to work\n\n  when creating a post:\n    user is able to create a post by clicking 'Create Post' button\n        brings up title and content fields\n          user enters in a title for the post\n          user enter in content for the post\n          user clicks 'Chirp'\n            title and content information are captured by form\n              how: using value= {e.target.value}\n            value is then passed to handler fx in component\n              how: onSubmit={e, handleChirp}\n            handler function updates variable in App using context\n          form closes and new post is rendered\n  when replying to a post:\n    user is able to reply\n      clicking on the 'Chirp' button\n        displays an input field with 'cancel' and 'save' buttons at the button corners\n          if user clicks Cancel:\n            input field disappears\n          if user clicks Save:\n            grab input from form\n              how: using e.target.value to target the user's input in all given fields\n              that input will be passed to a handler fx to update state using setState (through a fetch in that component?)\n              which will then be passed through context to handler fx back in App where that state variable needs to be stored\n            input field disappears\n    user is able to edit reply\n      clicks 'Edit' button\n          displays an input field with 'cancel' and 'save' buttons at the button corners\n            if user clicks Cancel:\n              input field disappears\n             if user clicks Save:\n            grab input from form\n              compare values to original\n                if different:\n              how: using e.target.value to target the user's new input in the textfield\n              that input will be passed to a handler fx to update state using setState if (through a fetch in that component?)\n              which will then be passed through context to handler fx back in App where that state variable needs to be stored\n            input field disappears\n      user is able to delete reply\n        clicks 'Delete' button\n          prompt confirms deletion of reply\n          if user clicks 'Cancel':\n            window prompt disappears\n          if user clicks 'Ok':\n            reply is deleted\n              how:\n                event is fired in buildToggleDelete\n                updates state by using the deleteReply handler in App\n\n  // handlers (below) are being referenced through context when used to update state in App\n  // how can I tie the handlers to my API requests using fetch() axios() would like to chain each of the promises in\n\n  // fetch to create new post\n\n  can we focus on that part a little bit longer...\n\n4/7\n\ncommit after completing each feature\n\n(MVP)\nI was wondering if you could help me outline the steps to:\n[] 'createPost' component\n  make createPost button\n  make your createPost component && showAddForm\n  fill in JSX\n    form\n    controlled inputs\n    formSubmit handler uses fx in app for submitHandler to call (through context)\n\n[] give ability to log in as different users\n\nevents issues:\n  [x]reply isn't appearing upon save\n  [x]edit/delete: TypeError: Cannot read property 'innerText' of null\n[x]not seeing styling for button in site-button component\nwant to hide openSince column with smaller screen sizes\n\nNode Js Interview next Monday\n  // express: handle all routes, make router, make middleware,\n  // knex how to make tables, alter, make foreign keys\n\n\nThinkful Sessions:\n  package-lock.json: keep all my files locked at this version\n  process.env says run my environmental variable on whatever server I'm on\n  vercel --prod skips preview step and deploys in one step\n  learn how to use gitHub pages\n\n\n\nAxios request: ((-) all reponses have to complete to run)\n\n(this looks cleaner to me/more organized)\nlet apiPosts = \"https://api.chirp-app/posts\";\nlet apiReplies = \"https://api.chirp-app/replies\";\n\nconst requestPosts = axios.get(apiPosts)\nconst requestReplies = axios.get(apiReplies)\n\naxios\n  .all([requestPosts, requestReplies])\n  .then(\n    axios.spread((...reponses) => {\n      const responsesCreatePost = responses[0];\n      const responsesEditPost = responses[1];\n      const responsesDeletePost = responses[2];\n      const responsesCreateReply = responses[3];\n      const responsesEditReply = responses[4];\n      const responsesDeleteReply = responses[5];\n\n      //use/access the results (setState?)\n      console.log(responsesCreatePost, responsesEditPost, responsesDeletePost, responsesCreateReply, responsesEditReply, responsesDeleteReply)\n    })\n  )\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport './components/font-awesome';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);","module.exports = {\n  PORT: process.env.PORT || 8000,\n  NODE_ENV: process.env.NODE_ENV || 'development',\n  API_URL: process.env.NODE_ENV === 'production' ? 'heroku url' : 'http://localhost:8002'\n}"],"sourceRoot":""}